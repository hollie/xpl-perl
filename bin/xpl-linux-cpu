#!/usr/bin/perl -w

=head1 NAME

xpl-linux-cpu - Perl script for an xPL Linux CPU monitor

=head1 SYNOPSIS

  xpl-linux-cpu [flags] [options]
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0 - the interface for xPL messages (first non-loopback or loopback)
    -s nn  - number of seconds between polling the linux-cpu daemon (120)

  # start the Linux CPU monitor with poll interval of 120 seconds
  xpl-linux-cpu -s 120

  # start the Linux CPU monitor listening and broadcasting on first Ethernet
  # interface in verbose mode using poll interval of 120 seconds
  xpl-linux-cpu -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that polls the Linux CPU stats in /proc/stat
and sends them as C<sensor.basic> messages with C<type=count>.

=cut

use 5.006;
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use POSIX qw/strftime/;
use xPL::Client;
use IO::Socket;
$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'linuxcpu', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
my $interval = 120;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
           'interval|s' => \$interval,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);

$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";
my $state = {};
my $buf = "";

# Add a timer to the xPL Client event loop to generate the
# "linux-cpu.update" messages.  The negative interval causes the timer to
# trigger immediately rather than waiting for the first interval.
$xpl->add_timer(id => 'poll',
                timeout => -$interval,
                callback => \&poll_linux_cpu);

$SIG{TERM} = \&end;
$SIG{QUIT} = \&end;

# Run the main loop
$xpl->main_loop();

# The callback to connect to linux-cpu
sub poll_linux_cpu {
  open my $fh, '<', '/proc/stat';
  unless ($fh) {
    warn "Failed to open /proc/stat: $!\n";
    return 1;
  }
  my $line = <$fh>;
  close $fh;
  my $type;
  my %d;
  ($type,@d{qw/user nice sys idle iowait irq softirq steal/}) =
    split /\s+/, $line;
  unless ($type eq 'cpu') {
    warn "Format of /proc/stat not supported: $!\n";
    return 1;
  }
  foreach my $k (sort keys %d) {
    my $val = $d{$k};
    next unless (defined $val);
    my $device = $xpl->instance_id."-".$k;
    $xpl->send_sensor_basic($device, $type, $val);
  }
  return 1;
}

# send a "hbeat.end" message on exit
sub end { defined $xpl && undef $xpl;exit; }#->send_hbeat_end(); exit; }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), proc(5)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2007, 2008 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut

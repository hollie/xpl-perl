#!/usr/bin/perl -w

=head1 NAME

xpl-rrd-ivmeter - Perl script for an xPL application that logs data to rrd files

=head1 SYNOPSIS

  xpl-rrd-ivmeter [flags] [options] <rrd-dir>
  where valid flags are:
    -h - show this help text
    -v - verbose client mode
  and valid options are (default shown in brackets):
    -i if0 - the interface for xPL messages (first non-loopback or loopback)
    -x map - map device names to more friendly aliases (none)
             N.B. This is a temporary hack to get around lack of config
             support this will be removed in future.

  # start the rrd listening and broadcasting on first Ethernet
  # interface in verbose mode
  xpl-rrd -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that logs known message types to RRD
database files.  Use of the L<ZenAH> engine RRD functions is the
preferred method of generating RRD files since this offers greater
integration with different output formats.

=cut

use 5.006;
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use xPL::Client;
use DB_File;
use RRDs;
use Fcntl;
use Time::Local;

$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'rrdlogiv', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
my $device_map;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
           'device_map|x=s' => \$device_map,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);

$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

my $rrd_dir =
   shift or pod2usage(-message =>
                        'The path to rrd directory parameter is required',
                      -exitstatus => 1);

mkdir $rrd_dir, 0755 unless (-d $rrd_dir); ## no critic

my %state;

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'xpl',
                       self_skip => 0, targeted => 0,
                       callback => \&xpl_msg);

# Run the main loop
$xpl->main_loop();

# The callback to log the incoming messages
sub xpl_msg {
  my %p = @_;
  my $msg = $p{message};
  my $time = time;
  my $c = chr(0);

  my $schema = $msg->schema;
  my $device = $msg->field('device');
  my $type = $msg->field('type');
  my $current = $msg->field('current');

  if ($msg->schema eq 'sensor.basic' && $device && $type eq 'current') {
    $state{$device.'/current'} = join($c, $time, $type, $current, 1, 'GAUGE', 0, 500000);
    update_rrd(time, $device.'/current', split(chr(0), $state{$device.'/current'}));
  } elsif ($msg->schema eq 'sensor.basic' && $device && $type eq 'voltage') {
    $state{$device.'/voltage'} = join($c, $time, $type, $current, 1, 'GAUGE', 0, 5);
    update_rrd(time, $device.'/voltage', split(chr(0), $state{$device.'/voltage'}));
  }

  return 1;
}

sub rrd {
  my $time = time;
  my %data = ();
  foreach my $dev (keys %state) {
    update_rrd($time, $dev, split(chr(0), $state{$dev}));
  }
  return 1;
}

sub update_rrd {
  my ($time, $dev, $last, $var, $val, $fill, $dstype, $min, $max, $hourly) = @_;
  my $rrd = $rrd_dir.'/';
  if ($dev =~ m!^(.*)/([^/]+)$!) {
    $rrd .= $1.'/';
    mkdir $rrd, 0755 unless (-d $1);
    $rrd .= $2.'.rrd';
    my $old = $rrd_dir.'/'.$1.'.rrd';
    if (-f $old) {
      print STDERR "Trying to rename $old to $rrd\n";
      rename($old, $rrd) or die "Failed to rename: $!\n";
    }
  } else {
    $rrd .= $dev.'.rrd';
  }

  unless (-f $rrd) {
    make_rrd($rrd, $time, $dev, $last, $var, $val, $fill, $dstype, $min, $max)
      or return;
  }

#  my $t = $fill ? $time : $last;
#  if ($last{$rrd} && $last{$rrd} >= $t) {
#    return 1;
#  }
  print "Updating RRD '$rrd' with value $val\n" if ($verbose);

  RRDs::update($rrd, '-t', $var, $last.':'.$val);
  my $err = RRDs::error;
  if ($err) {
    warn "ERROR updating $rrd: $err\n";
    return;
  }
  return 1;
}

sub make_rrd {
  my ($rrd, $time, $dev, $last, $var, $val, $fill, $dstype, $min, $max) = @_;
  print "Creating normal RRD '$rrd'\n" if ($verbose);

  RRDs::create($rrd,
               '--step', 1,
               "DS:$var:$dstype:120:$min:$max",
               'RRA:AVERAGE:0.5:1:360000', # 100 hours
               'RRA:AVERAGE:0.5:3600:2400', # every hour for 100 days
               'RRA:AVERAGE:0.5:86400:6000', # every day for 16 years
               'RRA:MIN:0.5:1:360000',
               'RRA:MIN:0.5:3600:2400',
               'RRA:MIN:0.5:86400:6000',
               'RRA:MAX:0.5:1:360000',
               'RRA:MAX:0.5:3600:2400',
               'RRA:MAX:0.5:86400:6000',
              );
  my $err = RRDs::error;
  if ($err) {
    warn "ERROR creating $rrd($var): $err\n";
    return;
  }
  return 1;
}

# send a "hbeat.end" message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), rrdtool(1), RRDs(3)

Project website: http://www.xpl-perl.org.uk/

ZenAH Project website: http://www.zenah.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2006, 2010 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut

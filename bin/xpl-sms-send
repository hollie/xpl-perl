#!/usr/bin/perl -w

=head1 NAME

xpl-sms-send - Perl script for an xPL SMS message sender

=head1 SYNOPSIS

  xpl-sms-send [flags] [options] <configuration-file>
  where valid flags are:
    -h - show this help text
  and valid options are (default shown in brackets):
    -i if0  - the interface for xPL messages (first non-loopback or loopback)

  # start the send-sms on first Ethernet interface in verbose mode
  xpl-sms-send -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that sends SMS messages via SMS services
supported by SMS::Send.  The format of the configuration file is:

  driver=CSoft
  _login=csoft-username
  _password=csoft-pin

  driver=Test
  _login=username
  _password=password

The first driver is taken to be the default.  The driver name can be
specified in the xPL sendmsg.basic message using the extra field
driver.

=cut

use 5.006;
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use xPL::Client;
use SMS::Send;
$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'sendsms', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);
$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

my $config_file = shift or
  pod2usage(-message => 'Configuration file is required', -exitstatus => 1);

my %drivers = map { $_ => 1 } SMS::Send->installed_drivers();

open my $fh, '<', $config_file or die "Failed to read $config_file: $!\n";
my $driver;
my $default;
while (<$fh>) {
  if (/^driver\s*[:=]\s*(.*)\s*$/) {
    unless (exists $drivers{$1}) {
      warn "Driver, $1, is not installed\n";
      next;
    }
    $driver = $1;
    $default = $1 unless (defined $default);
  } elsif ($driver) {
    if (/^(\w+)\s*[:=]\s*(.*)\s*$/) {
      $drivers{$driver} = {} unless (ref $drivers{$driver});
      $drivers{$driver}->{$1} = $2;
    }
  }
}
close $fh;
die "No driver configuration found\n" unless (defined $default);

foreach my $driver (keys %drivers) {
  next unless (ref $drivers{$driver});
  my $obj = SMS::Send->new($driver, %{$drivers{$driver}});
  unless ($obj) {
    warn "Failed to create SMS::Send object for driver $driver\n";
    die "\n" if ($driver eq $default);
    next;
  }
  print STDERR "Prepared driver, $driver\n";
  $drivers{$driver} = $obj;
}

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'xpl', callback => \&xpl,
                       filter => {
                                  message_type => 'xpl-cmnd',
                                  schema => 'sendmsg.basic',
                                 });

# Run the main loop
$xpl->main_loop();

sub xpl {
  my %p = @_;
  my $msg = $p{message};

  my $body = $msg->field('body');
  return send_conf("error", "null body") unless ($body);

  print $msg->summary,"\n";

  my $to = $msg->field('to');
  unless ($to =~ /^\+?[-0-9 ]+$/) {
    return send_conf("error", "invalid number, '$to', in 'to' field");
  }
  my $driver = $msg->field('driver') || $default;

  print STDERR "Using driver, $driver, to send the following to, '$to'\n",
    "  $body\n";

  my $response = $drivers{$driver}->send_sms(text => $body, to => $to);
  if ($response) {
    return send_conf("success");
  } else {
    return send_conf("attempted", "failed");
  }
}

sub send_conf {
  my $status = shift;
  my $error = shift;
  my %body = ( status => $status );
  $body{error} = $error if ($error);
  return $xpl->send(schema => 'sendmsg.confirm', body => \%body);
}

# send a "hbeat.end" message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), SMS::Send(3)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2007, 2008 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
